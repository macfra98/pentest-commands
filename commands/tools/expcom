\033[0;34m##################################################################################
\033[1;35m=== Registers (x86) ===\033[0m
\033[0;31m- REGISTERS (meaning) x86 -\033[0m
ESP -> STACK POINTER
EBP -> BREAK POINTER

\033[1;35m=== Compiling ===\033[0m
\033[0;31m- tcc -\033[0m
tcc -g -o <output_name> <program.c>

\033[0;31m- gcc -\033[0m

\033[1;35m=== gdb ===\033[0m
\033[0;31m- starting a program with gdb -\033[0m
gdb <program>

\033[0;31m- run the program -\033[0m
r
run

\033[0;31m- Useful utility commands -\033[0m
where -> \033[0;37mDisplay where on the stack you are.\033[0m

\033[0;31m- disassembling functions -\033[0m
disas <main>
disas <some_function_name>

\033[0;31m- setting a breakpoint (on specific address space +?) -\033[0m
break <*main+9> -> \033[0;37mBreak at a specific address space within a function.\033[0m
break <*func_name+0> -> \033[0;37mBreak at the start of a function.\033[0m

\033[0;31m- examine the registers -\033[0m
\033[1;31mSwitch between how the stack is displayed:\033[0m
x/10wx $esp -> \033[0;37mDisplay as 4 bytes each.\033[0m 
x/10bx $esp -> \033[0;37mDisplay as a single byte each.\033[0m

\033[1;31mExamine 10 addresspaces as hexadecimal starting at the $esp register:\033[0m
x/10x $esp -> \033[0;37mExamines the content of where $ESP is pointing at.\033[0m

\033[1;31mExamine 2 addresspaces as hexadecimal starting at the $ebp register (return addresses?):\033[0m
x/2x $ebp -> \033[0;37mExamines the content of where $EBP is pointing at.\033[0m

\033[1;31mExamine 5 addresspaces as instruction values starting at <a specific address>:\033[0m
x/5i <address> -> \033[0;37mExamines the content of where the specific address is pointing at.\033[0m

\033[1;31mExamine addresspaces as clear string values starting at $esp:\033[0m
x/s -> \033[0;37mExamines the content of where $esp.\033[0m

\033[0;34m##################################################################################
\n
