\033[0;34m##################################################################\033[0m
\033[1;35m=== Quick Tricks (Windows) ===\033[0m
\033[0m- bypass execution policy -\033[0m 
powershell -ep bypass

\033[0;34m##################################################################\033[0m
\033[1;35m=== Searching for files (Windows) ===\033[0m
\033[0;31m- searching with wildstar -\033[0m
Get-ChildItem -Path <C:\\path\\to\\search> -Include <*.kdbx> -File -Recurse -ErrorAction SilentlyContinue

\033[0;31m- searching for specific files -\033[0m
Get-ChildItem -Path <C:\\path\\to\\search> -Include <file> -File -Recurse -ErrorAction SilentlyContinue
\033[0;34m##################################################################\033[0m
\033[1;35m=== System enumeration (Windows) ===\033[0m
\033[0;31m- check which users exist locally on the system -\033[0m
Get-LocalUser

\033[0;31m- check which groups exist locally on the system -\033[0m
Get-LocalGroup

\033[0;31m- check local group members of specific group -\033[0m
Get-LocalGroupMember <group>

\033[0;31m- List environment paths -\033[0m
$env:path

\033[0;31m- Start powershell with execution bypass policy -\033[0m
powershell -ep bypass

\033[0;34m##################################################################\033[0m
\033[1;35m=== Importing & Using Modules(Windows) ===\033[0m
\033[0;31m- Reviewing integrity level -\033[0m
Import-Module NtObjectManager
Get-NtTokenIntegrityLevel

\033[0;31m- ... -\033[0m


\033[0;34m##################################################################\033[0m
\033[1;35m=== Windows Defender (Windows) ===\033[0m
\033[0m- Turn off windows defender -\033[0m
Set-MpPreference -DisableRealtimeMonitoring $true

\033[0;34m##################################################################\033[0m
\033[1;35m=== Windows Remoting (Windows) ===\033[0m
\033[0;31m- Turn on PSRemoting -\033[0m
Enable-PSRemoting -Force -SkipNetworkProfileCheck

\033[0;34m##################################################################\033[0m
\033[1;35m=== Windows PowerShell Scripts (Windows) ===\033[0m
\033[1;35m== PowerView.ps1 (Windows) ==\033[0m
\033[0;31m- Import Module of PowerView.ps1 -\033[0m
Import-Module .\PowerView.ps1

\033[0;31m- Net Domain -\033[0m
Get-NetDomain

\033[0;31m- Net User -\033[0m
Get-NetUser
Get-NetUser | select cn
Get-NetUser | select cn,pwdlastset,lastlogon
Get-NetUser -SPN | select samaccountname,serviceprincipalname

\033[0;31m- Net Group -\033[0m
Get-NetGroup
Get-NetGroup | select cn
Get-NetGroup "<group_name>" | select member

\033[0;31m- Net Computer -\033[0m
Get-NetComputer
Get-NetComputer | select operatingsystem,dnshostname
Get-NetComputer | select cn,destinguishedname

\033[0;31m- Net Session -\033[0m
Get-NetSession -ComputerName <computername> -Verbose

\033[0;31m- Find Local Admin Access -\033[0m
Find-LocalAdminAccess

\033[0;31m- enumerating domain shares -\033[0m
Find-DomainShare
ls \\\\<domainname>\\<folder/file>\\<folder/file>
type \\\\<domainname>\\<file>

\033[0;34m##################################################################\033[0m
\033[1;35m=== Windows PowerShell Programs (Windows) ===\033[0m
\033[1;35m== PsLoggedOn (Windows) ==\033[0m
\033[0;37mUses the NetSessionEnum API to see who is logged on to the computer via resource shares.\033[0m

\033[0;31m- Enumerate to see user logons -\033[0m 
.\PsLoggedon.exe \\\\<computername>

\033[0;34m##################################################################\033[0m
\n
