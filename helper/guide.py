import argparse
import info
import sys

class Guide:
    def __init__(self):
        self.parser = argparse.ArgumentParser(
            prog='Commands Guide',
            description='Guides the user of which alias to specify, why, and when. Use -h to see options.',
            epilog='FLAGS: -l (linux), -w (windows), -a (global), -s (services), -t (tools), -wb (webapp), -c (code)'
        )

    def parse_arguments(self):
        self.parser.add_argument('-a', '--all', help="The flag specifies global aliases", action='store_true')
        self.parser.add_argument('-w', '--windows', help="The flag specifies windows related aliases", action='store_true')
        self.parser.add_argument('-l', '--linux', help="The flag specifies linux related aliases", action='store_true')
        self.parser.add_argument('-wb', '--webapp', help="The flag specifies webapp related aliases", action='store_true')
        self.parser.add_argument('-t', '--tools', help="The flag specifies tools related aliases", action='store_true')
        self.parser.add_argument('-s', '--services', help="The flag specifies service related aliases", action='store_true')
        self.parser.add_argument('-c', '--code', help="The flag specifies code related aliases", action='store_true')

        args = self.parser.parse_args()
        return vars(args)

    def alias_info(self, arg, val):
        for k, v in info.options.items():
            if (k == arg) and val:
                for alias, desc in v.items():
                    print(f"""{k:<10} : {alias:<10} : {desc:<10}""") 

    def print_aliases(self, options):        
        t,a,c='TYPE','ALIAS','DESCRIPTION' 
        print(f"{t:<10}   {a:<10}   {c:<10}")
        print('#'*100)
        for arg, val in options.items():
            self.alias_info(arg, val)
        print('#'*100)


def main():
    guide = Guide()

    if len(sys.argv) == 1:
        guide.parser.print_help()
        sys.exit(1)

    options = guide.parse_arguments()
    guide.print_aliases(options)

if __name__ == '__main__':
    main()
